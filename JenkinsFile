pipeline {
    agent any
    
    tools {
        terraform 'TerraForm'
    }
    
    environment {
        AWS_REGION = "ap-south-1"
    }

    stages {
        stage('CodeClone') {
            steps {
                git url: 'https://github.com/AmittAshok/Jenkins-terraform-automate.git', branch:'master'
            }
        }
        stage('AWSLogin') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-cred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh '''
                echo "Login successfully"
                export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                export AWS_REGION="ap-south-1"
                aws sts get-caller-identity
            
                '''
}
            }
        }
        stage('InstallInfra') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-cred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh '''
                echo "Installation start "
                ls -l
                terraform init
                terraform plan -out=tfplan
                terraform apply -auto-approve
                '''
        }        
            }
        }
        
        stage('Destroy') {
            when {
                expression { return currentBuild.result == null || currentBuild.result == 'SUCCESS'}
            }
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-cred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh '''
                echo "Login successfully"
                export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                export AWS_REGION="ap-south-1"
                aws sts get-caller-identity
                terraform destroy -auto-approve
                '''
}            
            }
        }
    }
}
